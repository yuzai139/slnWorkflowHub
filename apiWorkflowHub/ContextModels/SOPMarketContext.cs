// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace apiWorkflowHub.ContextModels;

public partial class SOPMarketContext : DbContext
{
    public SOPMarketContext(DbContextOptions<SOPMarketContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TArticle> TArticles { get; set; }

    public virtual DbSet<TCategory> TCategories { get; set; }

    public virtual DbSet<TCompanySize> TCompanySizes { get; set; }

    public virtual DbSet<TLecture> TLectures { get; set; }

    public virtual DbSet<TLectureRecord> TLectureRecords { get; set; }

    public virtual DbSet<TLike> TLikes { get; set; }

    public virtual DbSet<TMember> TMembers { get; set; }

    public virtual DbSet<TMemberBankAccount> TMemberBankAccounts { get; set; }

    public virtual DbSet<TMessage> TMessages { get; set; }

    public virtual DbSet<TOrder> TOrders { get; set; }

    public virtual DbSet<TOrderDetail> TOrderDetails { get; set; }

    public virtual DbSet<TPointRecord> TPointRecords { get; set; }

    public virtual DbSet<TPublisher> TPublishers { get; set; }

    public virtual DbSet<TReply> TReplies { get; set; }

    public virtual DbSet<TShare> TShares { get; set; }

    public virtual DbSet<TShoppingCart> TShoppingCarts { get; set; }

    public virtual DbSet<TSop> TSops { get; set; }

    public virtual DbSet<TSopAffix> TSopAffixes { get; set; }

    public virtual DbSet<TSopIndustry> TSopIndustries { get; set; }

    public virtual DbSet<TSopIndustryClass> TSopIndustryClasses { get; set; }

    public virtual DbSet<TSopItem> TSopItems { get; set; }

    public virtual DbSet<TSopJob> TSopJobs { get; set; }

    public virtual DbSet<TSopJobClass> TSopJobClasses { get; set; }

    public virtual DbSet<TSopJobItem> TSopJobItems { get; set; }

    public virtual DbSet<TSopProduct> TSopProducts { get; set; }

    public virtual DbSet<TSubscription> TSubscriptions { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TArticle>(entity =>
        {
            entity.HasKey(e => e.FArticleId);

            entity.ToTable("tArticle");

            entity.Property(e => e.FArticleId).HasColumnName("fArticleID");
            entity.Property(e => e.FArticleContent)
                .IsRequired()
                .HasColumnName("fArticleContent");
            entity.Property(e => e.FArticleName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fArticleName");
            entity.Property(e => e.FCategoryNumber).HasColumnName("fCategoryNumber");
            entity.Property(e => e.FCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedAt");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fUpdatedAt");

            entity.HasOne(d => d.FCategoryNumberNavigation).WithMany(p => p.TArticles)
                .HasForeignKey(d => d.FCategoryNumber)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tArticle_tCategory");

            entity.HasOne(d => d.FMember).WithMany(p => p.TArticles)
                .HasForeignKey(d => d.FMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tArticle_tMember");
        });

        modelBuilder.Entity<TCategory>(entity =>
        {
            entity.HasKey(e => e.FCategoryNumber);

            entity.ToTable("tCategory");

            entity.Property(e => e.FCategoryNumber).HasColumnName("fCategoryNumber");
            entity.Property(e => e.FCategoryName)
                .HasMaxLength(50)
                .HasColumnName("fCategoryName");
        });

        modelBuilder.Entity<TCompanySize>(entity =>
        {
            entity.HasKey(e => e.FCompanySize);

            entity.ToTable("tCompanySize");

            entity.Property(e => e.FCompanySize)
                .HasMaxLength(50)
                .HasColumnName("fCompanySize");
            entity.Property(e => e.FSizeSort).HasColumnName("fSizeSort");
        });

        modelBuilder.Entity<TLecture>(entity =>
        {
            entity.HasKey(e => e.FLectureId);

            entity.ToTable("tLecture");

            entity.Property(e => e.FLectureId).HasColumnName("fLectureID");
            entity.Property(e => e.FLecDate)
                .HasMaxLength(50)
                .HasColumnName("fLecDate");
            entity.Property(e => e.FLecDescription).HasColumnName("fLecDescription");
            entity.Property(e => e.FLecImage).HasColumnName("fLecImage");
            entity.Property(e => e.FLecImagePath).HasColumnName("fLecImagePath");
            entity.Property(e => e.FLecLimit).HasColumnName("fLecLimit");
            entity.Property(e => e.FLecLocation)
                .HasMaxLength(400)
                .HasColumnName("fLecLocation");
            entity.Property(e => e.FLecName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fLecName");
            entity.Property(e => e.FLecPoints)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("fLecPoints");
            entity.Property(e => e.FLecPrice)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("fLecPrice");
            entity.Property(e => e.FLink)
                .HasMaxLength(400)
                .HasColumnName("fLink");
            entity.Property(e => e.FOnline).HasColumnName("fOnline");
            entity.Property(e => e.FPublisherId).HasColumnName("fPublisherID");
        });

        modelBuilder.Entity<TLectureRecord>(entity =>
        {
            entity.HasKey(e => e.FLecRecordId);

            entity.ToTable("tLectureRecord");

            entity.Property(e => e.FLecRecordId).HasColumnName("fLecRecordID");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FLectureId).HasColumnName("fLectureID");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
        });

        modelBuilder.Entity<TLike>(entity =>
        {
            entity.HasKey(e => e.FLikeId);

            entity.ToTable("tLike");

            entity.Property(e => e.FLikeId)
                .ValueGeneratedNever()
                .HasColumnName("fLikeID");
            entity.Property(e => e.FArticleId)
                .ValueGeneratedOnAdd()
                .HasColumnName("fArticleID");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
        });

        modelBuilder.Entity<TMember>(entity =>
        {
            entity.HasKey(e => e.FMemberId).HasName("PK_fMember");

            entity.ToTable("tMember");

            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FAddress)
                .HasMaxLength(50)
                .HasColumnName("fAddress");
            entity.Property(e => e.FBirthday)
                .HasMaxLength(50)
                .HasColumnName("fBirthday");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FMailVerify).HasColumnName("fMailVerify");
            entity.Property(e => e.FMemberPoints).HasColumnName("fMemberPoints");
            entity.Property(e => e.FMemberShip).HasColumnName("fMemberShip");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FPassword)
                .HasMaxLength(50)
                .HasColumnName("fPassword");
            entity.Property(e => e.FPermissions)
                .HasMaxLength(50)
                .HasColumnName("fPermissions");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
            entity.Property(e => e.FSopexp).HasColumnName("fSOPExp");
        });

        modelBuilder.Entity<TMemberBankAccount>(entity =>
        {
            entity.HasKey(e => e.FMemberBankId).HasName("PK_fMemberBankAccount");

            entity.ToTable("tMemberBankAccount");

            entity.Property(e => e.FMemberBankId).HasColumnName("fMemberBankID");
            entity.Property(e => e.FBankAccount).HasColumnName("fBankAccount");
            entity.Property(e => e.FBankAccountName)
                .HasMaxLength(50)
                .HasColumnName("fBankAccountName");
            entity.Property(e => e.FFinanInstitutionBranchId)
                .HasMaxLength(50)
                .HasColumnName("fFinanInstitutionBranchId");
            entity.Property(e => e.FFinanInstitutionsName)
                .HasMaxLength(100)
                .HasColumnName("fFinanInstitutionsName");
            entity.Property(e => e.FFinianInstitutionsId)
                .HasMaxLength(50)
                .HasColumnName("fFinianInstitutionsId");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
        });

        modelBuilder.Entity<TMessage>(entity =>
        {
            entity.HasKey(e => e.FMessageId);

            entity.ToTable("tMessage");

            entity.Property(e => e.FMessageId).HasColumnName("fMessageID");
            entity.Property(e => e.FArticleId).HasColumnName("fArticleID");
            entity.Property(e => e.FCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedAt");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FMessageContent)
                .IsRequired()
                .HasColumnName("fMessageContent");
            entity.Property(e => e.FUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fUpdatedAt");

            entity.HasOne(d => d.FArticle).WithMany(p => p.TMessages)
                .HasForeignKey(d => d.FArticleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMessage_tArticle");

            entity.HasOne(d => d.FMember).WithMany(p => p.TMessages)
                .HasForeignKey(d => d.FMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMessage_tMember");
        });

        modelBuilder.Entity<TOrder>(entity =>
        {
            entity.HasKey(e => e.FOrderId).HasName("PK_訂單");

            entity.ToTable("tOrder");

            entity.Property(e => e.FOrderId).HasColumnName("fOrderID");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("fOrderDate");
            entity.Property(e => e.FOrderStatus).HasColumnName("fOrderStatus");
            entity.Property(e => e.FPayment)
                .HasMaxLength(50)
                .HasColumnName("fPayment");
            entity.Property(e => e.FTotalPrice)
                .HasColumnType("money")
                .HasColumnName("fTotalPrice");
        });

        modelBuilder.Entity<TOrderDetail>(entity =>
        {
            entity.HasKey(e => e.FOrdRecordId).HasName("PK_訂單詳情");

            entity.ToTable("tOrderDetails");

            entity.Property(e => e.FOrdRecordId).HasColumnName("fOrdRecordID");
            entity.Property(e => e.FIsCopy).HasColumnName("fIsCopy");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderID");
            entity.Property(e => e.FSopid).HasColumnName("fSOPID");
            entity.Property(e => e.FSubtotal)
                .HasColumnType("money")
                .HasColumnName("fSubtotal");
        });

        modelBuilder.Entity<TPointRecord>(entity =>
        {
            entity.HasKey(e => e.FPointRecordId);

            entity.ToTable("tPointRecord");

            entity.Property(e => e.FPointRecordId).HasColumnName("fPointRecordId");
            entity.Property(e => e.FExplanation)
                .HasMaxLength(500)
                .HasColumnName("fExplanation");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FPointRecord)
                .HasMaxLength(200)
                .HasColumnName("fPointRecord");
            entity.Property(e => e.FRecordTime)
                .HasMaxLength(100)
                .HasColumnName("fRecordTime");
        });

        modelBuilder.Entity<TPublisher>(entity =>
        {
            entity.HasKey(e => e.FPublisherId);

            entity.ToTable("tPublisher");

            entity.Property(e => e.FPublisherId).HasColumnName("fPublisherID");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FPubCreateTime)
                .HasMaxLength(50)
                .HasColumnName("fPubCreateTime");
            entity.Property(e => e.FPubDescription).HasColumnName("fPubDescription");
            entity.Property(e => e.FPubImage).HasColumnName("fPubImage");
            entity.Property(e => e.FPubImagePath).HasColumnName("fPubImagePath");
            entity.Property(e => e.FPubLink).HasColumnName("fPubLink");
            entity.Property(e => e.FPubName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fPubName");
            entity.Property(e => e.FPubStatus)
                .HasMaxLength(50)
                .HasColumnName("fPubStatus");
        });

        modelBuilder.Entity<TReply>(entity =>
        {
            entity.HasKey(e => e.FReplyId).HasName("PK_tReply_1");

            entity.ToTable("tReply");

            entity.Property(e => e.FReplyId)
                .ValueGeneratedNever()
                .HasColumnName("fReplyID");
            entity.Property(e => e.FArticleId)
                .ValueGeneratedOnAdd()
                .HasColumnName("fArticleID");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FReplyContent).HasColumnName("fReplyContent");
        });

        modelBuilder.Entity<TShare>(entity =>
        {
            entity.HasKey(e => e.FShareId);

            entity.ToTable("tShare");

            entity.Property(e => e.FShareId)
                .ValueGeneratedNever()
                .HasColumnName("fShareID");
            entity.Property(e => e.FArticleId).HasColumnName("fArticleID");
            entity.Property(e => e.FMemberId)
                .ValueGeneratedOnAdd()
                .HasColumnName("fMemberID");
            entity.Property(e => e.FShareUrl)
                .HasMaxLength(50)
                .HasColumnName("fShareURL");
        });

        modelBuilder.Entity<TShoppingCart>(entity =>
        {
            entity.HasKey(e => e.FCartId).HasName("PK_t購物車");

            entity.ToTable("tShoppingCart ");

            entity.Property(e => e.FCartId).HasColumnName("fCartID");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FPriceId)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("fPriceID");
            entity.Property(e => e.FSopid).HasColumnName("fSOPID");
        });

        modelBuilder.Entity<TSop>(entity =>
        {
            entity.HasKey(e => e.FSopid).HasName("PK_tSOP");

            entity.ToTable("tSop");

            entity.Property(e => e.FSopid).HasColumnName("fSOPID");
            entity.Property(e => e.FBusiness)
                .HasMaxLength(100)
                .HasColumnName("fBusiness");
            entity.Property(e => e.FCompanySize)
                .HasMaxLength(50)
                .HasColumnName("fCompanySize");
            entity.Property(e => e.FCustomer)
                .HasMaxLength(400)
                .HasColumnName("fCustomer");
            entity.Property(e => e.FDepartment)
                .HasMaxLength(50)
                .HasColumnName("fDepartment");
            entity.Property(e => e.FEditTime)
                .HasMaxLength(50)
                .HasColumnName("fEditTime");
            entity.Property(e => e.FFileStatus)
                .HasMaxLength(50)
                .HasColumnName("fFileStatus");
            entity.Property(e => e.FIndustryId).HasColumnName("fIndustryId");
            entity.Property(e => e.FIsRelease).HasColumnName("fIsRelease");
            entity.Property(e => e.FJobItemId).HasColumnName("fJobItemId");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FPrice)
                .HasColumnType("money")
                .HasColumnName("fPrice");
            entity.Property(e => e.FProductUrl)
                .HasMaxLength(400)
                .HasColumnName("fProductUrl");
            entity.Property(e => e.FPubContent).HasColumnName("fPubContent");
            entity.Property(e => e.FPubSopImage).HasColumnName("fPubSopImage");
            entity.Property(e => e.FPubSopImagePath).HasColumnName("fPubSopImagePath");
            entity.Property(e => e.FPublisherId).HasColumnName("fPublisherID");
            entity.Property(e => e.FReleaseStatus)
                .HasMaxLength(50)
                .HasColumnName("fReleaseStatus");
            entity.Property(e => e.FReleaseTime)
                .HasMaxLength(50)
                .HasColumnName("fReleaseTime");
            entity.Property(e => e.FSalePoints)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("fSalePoints");
            entity.Property(e => e.FSharePermission)
                .HasMaxLength(50)
                .HasColumnName("fSharePermission");
            entity.Property(e => e.FShareTargetId).HasColumnName("fShareTargetID");
            entity.Property(e => e.FShareUrl)
                .HasMaxLength(400)
                .HasColumnName("fShareURL");
            entity.Property(e => e.FSopDescription).HasColumnName("fSopDescription");
            entity.Property(e => e.FSopFlowImage).HasColumnName("fSopFlowImage");
            entity.Property(e => e.FSopFlowImagePath).HasColumnName("fSopFlowImagePath");
            entity.Property(e => e.FSopName)
                .HasMaxLength(50)
                .HasColumnName("fSopName");
            entity.Property(e => e.FSopType).HasColumnName("fSopType");
        });

        modelBuilder.Entity<TSopAffix>(entity =>
        {
            entity.HasKey(e => e.FSopaffixId).HasName("PK_tSOPAffix");

            entity.ToTable("tSopAffix");

            entity.Property(e => e.FSopaffixId).HasColumnName("fSOPAffixID");
            entity.Property(e => e.FAffixName)
                .HasMaxLength(50)
                .HasColumnName("fAffixName");
            entity.Property(e => e.FAffixPath).HasColumnName("fAffixPath");
            entity.Property(e => e.FSopid).HasColumnName("fSOPID");
        });

        modelBuilder.Entity<TSopIndustry>(entity =>
        {
            entity.HasKey(e => e.FIndustryId);

            entity.ToTable("tSopIndustry");

            entity.Property(e => e.FIndustryId).HasColumnName("fIndustryId");
            entity.Property(e => e.FIndustry)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fIndustry");
            entity.Property(e => e.FIndustryClass)
                .HasMaxLength(50)
                .HasColumnName("fIndustryClass");
            entity.Property(e => e.FIndustryClassId).HasColumnName("fIndustryClassId");
            entity.Property(e => e.FIndustrySort).HasColumnName("fIndustrySort");
        });

        modelBuilder.Entity<TSopIndustryClass>(entity =>
        {
            entity.HasKey(e => e.FIndustryClassId);

            entity.ToTable("tSopIndustryClass");

            entity.Property(e => e.FIndustryClassId).HasColumnName("fIndustryClassId");
            entity.Property(e => e.FIndustryClass)
                .HasMaxLength(50)
                .HasColumnName("fIndustryClass");
            entity.Property(e => e.FIndustryClassSort).HasColumnName("fIndustryClassSort");
        });

        modelBuilder.Entity<TSopItem>(entity =>
        {
            entity.HasKey(e => e.FSopitemId).HasName("PK_tSOPItem");

            entity.ToTable("tSopItem");

            entity.Property(e => e.FSopitemId).HasColumnName("fSOPItemID");
            entity.Property(e => e.FSopid).HasColumnName("fSOPID");
        });

        modelBuilder.Entity<TSopJob>(entity =>
        {
            entity.HasKey(e => e.FJobId);

            entity.ToTable("tSopJob");

            entity.Property(e => e.FJobId).HasColumnName("fJobId");
            entity.Property(e => e.FJob)
                .HasMaxLength(50)
                .HasColumnName("fJob");
            entity.Property(e => e.FJobClassId).HasColumnName("fJobClassId");
            entity.Property(e => e.FJobSort).HasColumnName("fJobSort");
        });

        modelBuilder.Entity<TSopJobClass>(entity =>
        {
            entity.HasKey(e => e.FJobClassId);

            entity.ToTable("tSopJobClass");

            entity.Property(e => e.FJobClassId).HasColumnName("fJobClassId");
            entity.Property(e => e.FJobClass)
                .HasMaxLength(50)
                .HasColumnName("fJobClass");
            entity.Property(e => e.FJobClassSort).HasColumnName("fJobClassSort");
        });

        modelBuilder.Entity<TSopJobItem>(entity =>
        {
            entity.HasKey(e => e.FJobItemId);

            entity.ToTable("tSopJobItem");

            entity.Property(e => e.FJobItemId).HasColumnName("fJobItemId");
            entity.Property(e => e.FJob)
                .HasMaxLength(50)
                .HasColumnName("fJob");
            entity.Property(e => e.FJobClass)
                .HasMaxLength(50)
                .HasColumnName("fJobClass");
            entity.Property(e => e.FJobId).HasColumnName("fJobId");
            entity.Property(e => e.FJobItem)
                .HasMaxLength(50)
                .HasColumnName("fJobItem");
            entity.Property(e => e.FJobItemSort).HasColumnName("fJobItemSort");
        });

        modelBuilder.Entity<TSopProduct>(entity =>
        {
            entity.HasKey(e => e.FSopProductId).HasName("PK_tSopProduct_1");

            entity.ToTable("tSopProduct");

            entity.Property(e => e.FSopProductId).HasColumnName("fSopProductId");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderID");
            entity.Property(e => e.FPrice)
                .HasColumnType("money")
                .HasColumnName("fPrice");
            entity.Property(e => e.FSopid).HasColumnName("fSOPID");
        });

        modelBuilder.Entity<TSubscription>(entity =>
        {
            entity.HasKey(e => e.FSubscriptionId);

            entity.ToTable("tSubscription");

            entity.Property(e => e.FSubscriptionId)
                .ValueGeneratedNever()
                .HasColumnName("fSubscriptionID");
            entity.Property(e => e.FArticleId).HasColumnName("fArticleID");
            entity.Property(e => e.FMemberId)
                .ValueGeneratedOnAdd()
                .HasColumnName("fMemberID");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}